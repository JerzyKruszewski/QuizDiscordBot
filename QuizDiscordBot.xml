<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuizDiscordBot</name>
    </assembly>
    <members>
        <member name="T:QuizDiscordBot.BotConfig">
            <summary>
            Struktura przechowująca dane o bocie
            </summary>
        </member>
        <member name="F:QuizDiscordBot.BotConfig.token">
            <summary>
            Token do autoryzacji zapytań API
            </summary>
        </member>
        <member name="F:QuizDiscordBot.BotConfig.cmdPrefix">
            <summary>
            Prefix do komendy
            </summary>
        </member>
        <member name="F:QuizDiscordBot.BotConfig.ownerID">
            <summary>
            Discordowe Id właściciela
            </summary>
            <remarks>
            Nieużyte 
            </remarks>
        </member>
        <member name="T:QuizDiscordBot.CommandHandler">
            <summary>
            Klasa odpowiedzialna za obsługę komend
            </summary>
        </member>
        <member name="F:QuizDiscordBot.CommandHandler._client">
            <summary>
            Obiekt odpowiedzialny za obsługę konta bota na discordzie
            </summary>
        </member>
        <member name="F:QuizDiscordBot.CommandHandler._commands">
            <summary>
            Framework do obsługi komend
            </summary>
        </member>
        <member name="F:QuizDiscordBot.CommandHandler._service">
            <summary>
            Nie mam pojęcia co to jest, ale bez niego bot nie będzie rozpoznawał komend
            </summary>
        </member>
        <member name="M:QuizDiscordBot.CommandHandler.InitializeAsync(Discord.WebSocket.DiscordSocketClient)">
            <summary>
            Zainicjuj obsługę komend dla bota
            </summary>
            <param name="client">
            Bot's discord account
            </param>
            <returns>
            Task object
            </returns>
        </member>
        <member name="M:QuizDiscordBot.CommandHandler.HandleCommandAsync(Discord.WebSocket.SocketMessage)">
            <summary>
            Reakcja bota na wiadoość
            </summary>
            <param name="s">
            Message on discord server/guild
            </param>
            <returns>
            Task object
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Config">
            <summary>
            Klasa odpowiedzialna za konfigurację bota
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Config.ConfigFolder">
            <summary>
            Folder pliku config
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Config.ConfigFile">
            <summary>
            Nazwa pliku konfiguracyjnego
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Config.bot">
            <summary>
            Instancja struktury konfiguracji bota
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Categories">
            <summary>
            Klasa odpowiedzialna za zarządznie kategoriami
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.Categories.GetCategory(System.Int32,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź z listy kategorię o numerze id: id
            </summary>
            <param name="id">
            identyfikator kategorii którą należy znaleźć
            </param>
            <param name="categories">
            Lista wszystkich kategorii dostępnych na serwerze
            </param>
            <returns>
            Znalezioną kategorię
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.Categories.CreateCategory(System.String,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Stwórz nową kategorię
            </summary>
            <param name="name">
            Nazwa nowej kategorii
            </param>
            <param name="categories">
            Lista wszystkich kategorii dostępnych na serwerze
            </param>
            <returns>
            Nowo utworzoną kategorię
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.Categories.CategoryExists(System.String,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Sprawdź, czy kategoria o takiej nazwie istnieje
            </summary>
            <param name="name">
            Nazwa nowej kategorii
            </param>
            <param name="categories">
            Lista wszystkich kategorii dostępnych na serwerze
            </param>
            <returns>
            Czy kategoria istnieje
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Core.Guilds">
            <summary>
            Klasa odpowiedzialna za zarządzanie danymi o serwerze.
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.Guilds.FilePath">
            <summary>
            Ścieżka do pliku z bazą danych
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.Guilds._guilds">
            <summary>
            Lista wszystkich serwerów obsługiwanych przez bota
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.Guilds._storage">
            <summary>
            Obiekt umożliwiający zapis i odczyt danych
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.Guilds.#cctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.Guilds.Save">
            <summary>
            Zapisz dane o serwerach w bazie
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.Guilds.GetGuild(System.UInt64)">
            <summary>
            Znajdź dane o serwerze
            </summary>
            <param name="id">
            Discordowe id serwera
            </param>
            <returns>
            Obiekt zawierający wszystkie potrzebne dane o serwerze
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.Guilds.GetOrCreateGuild(System.UInt64)">
            <summary>
            Znajdź lub stwórz (jeśli nie istnieje) obiekt z danymi o serwerze
            </summary>
            <param name="id">
            Discordowe id serwera
            </param>
            <returns>
            Obiekt zawierający wszystkie potrzebne dane o serwerze
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.Guilds.CreateGuild(System.UInt64)">
            <summary>
            Stwórz obiekt z danymi o serwerze
            </summary>
            <param name="id">
            Discordowe id serwera
            </param>
            <returns>
            Nowo utworzony obiekt zawierający wszystkie potrzebne dane o serwerze
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.Category">
            <summary>
            Klasa reprezentuje kategorie pytań i opracowań dostępnych na serwerze
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Category.Id">
            <summary>
            Numer identyfikacyjny kategorii
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Category.Name">
            <summary>
            Nazwa kategorii
            </summary>
            <remarks>
            Unikalna nazwa
            </remarks>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Category.ProblemCovers">
            <summary>
            Lista opracowań problemów dla tej kategorii
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Category.Questions">
            <summary>
            Lista pytań dostępnych dla tej kategorii
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.Guild">
            <summary>
            Klasa reprezentująca serwer discorda (gildię). Zawierająca listę kategorii oraz kont użytkowników.
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Guild.Id">
            <summary>
            Discordowy identyfikator serwera
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Guild.Categories">
            <summary>
            Lista kategorii dostępnych na serwerze
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Guild.UserAccounts">
            <summary>
            Lista kont użytkowników
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.ProblemCover">
            <summary>
            Klasa reprezentująca opracowanie problemu.
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.ProblemCover.Id">
            <summary>
            Identyfikator opracowania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.ProblemCover.Title">
            <summary>
            Tytuł opracowania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.ProblemCover.Description">
            <summary>
            Opis opracowania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.ProblemCover.ImageURL">
            <summary>
            Ewentualny link do zdjęcia oprazującego problem
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.Question">
            <summary>
            Klasa reprezentująca pytania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Question.Id">
            <summary>
            identyfikator pytania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Question.Description">
            <summary>
            Opis pytania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Question.PossibleAnswers">
            <summary>
            Lista możliwych odpowiedzi na pytanie
            </summary>
            <remarks>
            Maksymalnie 20.
            Lista wszystkich możliwych dostępna jest pod: LoremIpsumBot.Util (odpowiednia funkcja konwertuje string na obiekt Emoji)
            </remarks>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Question.RightAnswer">
            <summary>
            Indeks prawidłowej odpowiedzi do pytania
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.Question.ImageURL">
            <summary>
            Ewentualny link do obrazka obrazującego problem w pytaniu
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.UserAccount">
            <summary>
            Klasa reprezentuje konto użytkownika
            </summary>
            <remarks>
            Konto użytkownika jest zależne od serwera z jakiego korzysta
            </remarks>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserAccount.UserId">
            <summary>
            Discordowy identyfikator użytkownika
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserAccount.SeenQuestionsIds">
            <summary>
            Lista id pytań, które użytkownik już widział.
            </summary>
            <remarks>
            Używane przy próbie znalezienia niewidzianego wcześniej pytania oraz popraw wyniku.
            </remarks>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserAccount.WrongAnswersQuestionIds">
            <summary>
            Lista id pytań na które użytkownik odpowiedział nieprawidłowo.
            </summary>
            <remarks>
            Używane przy poprawach wyniku.
            </remarks>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserAccount.CategoryComplition">
            <summary>
            Ilość poprawnych odpowiedzi ze względu na kategorie z której pochodziły pytania.
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.Objects.UserFeedback">
            <summary>
            Klasa reprezentująca ocenę urzytkownika
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserFeedback.UserId">
            <summary>
            Discordowy identyfikator osoby pozostawiający ocenę
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserFeedback.IsPositive">
            <summary>
            Czy ocane jest pozytywna
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Core.Objects.UserFeedback.Description">
            <summary>
            Opis oceny
            </summary>
        </member>
        <member name="T:QuizDiscordBot.Core.ProblemCovers">
            <summary>
            Klasa odpowiedzialna za zarządzanie opracowaniami problemów
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.ProblemCovers.GetProblemCover(System.Int32,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź opracowanie problemu.
            </summary>
            <param name="id">
            Id opracowania, które należy znaleźć.
            </param>
            <param name="categories">
            Lista wszystkich dostępnych na serwerze kategorii
            </param>
            <returns>
            Znalezione opracowanie problemu
            </returns>
            <remarks>
            Może zwrócić null jeśli nie znajdzie opracowania.
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Core.ProblemCovers.CreateProblemCover(System.String,System.String,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category},System.String)">
            <summary>
            Stwórz nowe opracowanie
            </summary>
            <param name="title">
            Tytuł opracowania
            </param>
            <param name="description">
            Opis opracowania
            </param>
            <param name="categories">
            Lista wszystkich dostępnych na serwerze kategorii
            </param>
            <param name="imageURL">
            Ewentualny link do zdjęcia obrazującego problem
            </param>
            <returns>
            Stworzone opacowanie
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Core.Questions">
            <summary>
            Klasa odpowiedzialna za zarządznie pytaniami
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.Questions.GetQuestion(System.Int32,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź pytanie
            </summary>
            <param name="id">
            Id pytania do znalezienia
            </param>
            <param name="categories">
            Lista wszystkich kategorii dostępnych na serwerze.
            </param>
            <returns>
            Znalezione pytanie
            </returns>
            <remarks>
            Może zwracać null jeśli nie zostanie znalezione
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Core.Questions.CreateQuestion(System.String,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category},System.String)">
            <summary>
            Stwórz nowe pytanie
            </summary>
            <param name="description">
            Treść pytanie
            </param>
            <param name="rightAnswer">
            Indeks poprawnej odpowiedzi
            </param>
            <param name="possibleAnswers">
            Lista możliwych odpowiedzi
            </param>
            <param name="categories">
            Wszystkie kategorie na serwerze
            </param>
            <param name="imageURL">
            Ewentualny link do zdjęcia obrazującego pytanie
            </param>
            <returns>
            Nowo stworzone pytanie
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Core.UserAccounts">
            <summary>
            Klasa odpowiedzialna za zarządzanie kontami użytkowników
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.UserAccounts.GetUserAccount(System.UInt64,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.UserAccount},System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź konto użytkownika
            </summary>
            <param name="id">
            Discordowy identyfikator użytkownika
            </param>
            <param name="accounts">
            Lista wszystkich kont użytkowników dostępnych na serwerze
            </param>
            <param name="categories">
            Lista wszystkich dostępnych na serwerze kategorii
            </param>
            <returns>
            Znalezione konto użytkownika
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.UserAccounts.GetOrCreateUserAccount(System.UInt64,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.UserAccount},System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź lub stwórz konto użytkownika
            </summary>
            <param name="id">
            Discordowy identyfikator użytkownika
            </param>
            <param name="accounts">
            Lista wszystkich kont użytkowników dostępnych na serwerze
            </param>
            <param name="categories">
            Lista wszystkich dostępnych na serwerze kategorii
            </param>
            <returns>
            Znalezione konto użytkownika
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.UserAccounts.CreateUserAccount(System.UInt64,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.UserAccount},System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Stwórz konto użytkownika
            </summary>
            <param name="id">
            Discordowy identyfikator użytkownika
            </param>
            <param name="accounts">
            Lista wszystkich kont użytkowników dostępnych na serwerze
            </param>
            <param name="categories">
            Lista wszystkich dostępnych na serwerze kategorii
            </param>
            <returns>
            Nowo utworzone konto użytkownika
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.UserAccounts.CalculateTotalPointsOfUser(QuizDiscordBot.Core.Objects.UserAccount)">
            <summary>
            Podlicz wszystkie punkty z kategorii
            </summary>
            <param name="user">
            Konto użytkownika
            </param>
            <returns>
            Wszystkie punkty zdobyte przez użytkownika
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Core.UserFeedbacks">
            <summary>
            Klasa odpowiedzialna za zarządzanie ocanami użytkowników
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.UserFeedbacks.FilePath">
            <summary>
            Ścieżka do pliku z bazą danych
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.UserFeedbacks._userFeedbacks">
            <summary>
            Lista wszystkich ocen użytkowników
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Core.UserFeedbacks._storage">
            <summary>
            Obiekt umożliwiający zapis i odczyt danych
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.UserFeedbacks.#cctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.UserFeedbacks.Save">
            <summary>
            Zapisz dane o ocenach w bazie
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Core.UserFeedbacks.GetUserFeedback(System.UInt64)">
            <summary>
            Znajdź ocenę użytkoenika
            </summary>
            <param name="userId">
            Discordowe id autora
            </param>
            <returns>
            Znalezioną ocenę użytkownika
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.UserFeedbacks.GetOrCreateUserFeedback(System.UInt64)">
            <summary>
            Znajdź lub stwórz ocenę użytkownika
            </summary>
            <param name="userId">
            Discordowe id autora
            </param>
            <returns>
            Znalezioną ocenę użytkownika
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Core.UserFeedbacks.CreateUserFeedback(System.UInt64)">
            <summary>
            Stwórz nową ocenę
            </summary>
            <param name="userId">
            Discordowe id autora
            </param>
            <returns>
            Nowo stworzoną ocenę użytkowika.
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Modules.AdminCommands">
            <summary>
            Komendy dla osób uprawnionych do zarządzania algorytmem
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Modules.AdminCommands.CreateCategory">
            <summary>
            Stwórz kategorię dla pytań i problemów
            </summary>
            <returns></returns>
            <remarks>
            Wymaga aby wywołujący komendę miał uprawnienia administratora na serwerze (gildii)
            
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy użytkownik jest uprawniony do wywołania komendy
                1a. Jeśli jest:
                    1a.1. Sprawdza czy gildia istnieje w bazie danych
                        1a.1a. Jeśli nie:
                            1a.1a.1. Tworzy nową gildię
                            1a.1a.2. Dodaje ją do bazy danych gildii
                            1a.1a.3. Zapisuje zmiany do bazy danych
                            1a.1a.4. Przekazuje dalej dane
                        1a.1b. Jeśli tak:
                            1a.1b.1. Pobiera dane o gildii
                    1a.2. Pobiera wszystkie dostępne w gildii kategorie
                    1a.3. Wysyła do użytkownika informacje o istniejących kategoriach
                    1a.4. Oczekuje na reakcję użytkownika z nazwą nowej kategorii
                        1a.4a. Jeśli nie nadejdzie:
                            1a.4a.1. Poinformuje użytkownika o błędzie
                            1a.4a.2. Wstrzymuje proces
                            1a.4a.3. KONIEC - algorytm nie otrzymał wymaganej informacji od użytkownika
                    1a.5. Sprawdzi czy kategoria o podanej przez użytkownika nazwie istnieje
                         1a.5a. Jeśli istnieje:
                            1a.5a.1. Poinformuje użytkownika o błędzie
                            1a.5a.2. Wstrzymuje proces
                            1a.5a.3. KONIEC - kategoria już istnieje
                    1a.7. Stworzy nową kategorię
                    1a.8. Dodaje kategorię do bazy danych
                    1a.9. Zapisuje zmiany do bazy danych
                    1a.10. KONIEC - sukces, kategoria została dodana
                1b. Jeśli nie jest:
                    1b.1. Wypisuje informacje o nadużyciu
                    1b.2. KONIEC - użytkownik nie uprawniony
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.AdminCommands.CreateQuestion">
            <summary>
            Stwórz pytanie
            </summary>
            <returns></returns>
            <remarks>
            Wymaga aby wywołujący komendę miał uprawnienia administratora na serwerze
            
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy użytkownik jest uprawniony do wywołania komendy
                1a. Jeśli jest:
                    1a.1. Sprawdza czy gildia istnieje w bazie danych
                        1a.1a. Jeśli nie:
                            1a.1a.1. Tworzy nową gildię
                            1a.1a.2. Dodaje ją do bazy danych gildii
                            1a.1a.3. Zapisuje zmiany do bazy danych
                            1a.1a.4. Przekazuje dalej dane
                        1a.1b. Jeśli tak:
                            1a.1b.1. Pobiera dane o gildii
                    1a.2. Pobiera wszystkie dostępne w gildii kategorie
                    1a.3. Wysyła do użytkownika informacje o istniejących kategoriach
                    1a.4. Oczekuje na reakcję użytkownika z indeksem kategorii
                        1a.4a. Jeśli nie nadejdzie lub będzie miało nieprawidłowy format:
                            1a.4a.1. Poinformuje użytkownika o błędzie
                            1a.4a.2. Wstrzymuje proces
                            1a.4a.3. KONIEC - algorytm nie otrzymał wymaganej informacji od użytkownika lub nieprawidłowy format
                    1a.5. Oczekuje na reakcję użytkownika z treścią pytania
                        1a.5a. Jeśli nie nadejdzie:
                            1a.5a.1. Poinformuje użytkownika o błędzie
                            1a.5a.2. Wstrzymuje proces
                            1a.5a.3. KONIEC - algorytm nie otrzymał wymaganej informacji
                    1a.6. Oczekuje na reakcję użytkownika z możliwymi odpowiedziami
                        1a.6a. Jeśli nie nadejdzie:
                            1a.6a.1. Poinformuje użytkownika o błędzie
                            1a.6a.2. Wstrzymuje proces
                            1a.6a.3. KONIEC - algorytm nie otrzymał wymaganej informacji
                    1a.7. Odczytuje możliwe odpowiedzi z pojedynczej wiadomości
                    1a.8. Wysyła do użytkownika informacje o odczytanych możliwych odpowiedziach
                    1a.9. Oczekuje na reakcję użytkownika z indeksem prawidłowej odpowiedzi
                        1a.9a. Jeśli nie nadejdzie lub będzie miało nieprawidłowy format lub nie odczytano odpowiedzi o takim indeksie:
                            1a.9a.1. Poinformuje użytkownika o błędzie
                            1a.9a.2. Wstrzymuje proces
                            1a.9a.3. KONIEC - algorytm nie otrzymał wymaganej informacji od użytkownika lub nieprawidłowy format
                    1a.10. Oczekuje na reakcję użytkownika z linkiem URL do obrazka
                        1a.10a. Jeśli nadejdzie:
                            1a.10a.1. Zapisuje informacje o obrazku
                    1a.11. Sprawdza najniższy dostępny numer identyfikacyjny
                    1a.12. Tworzy nowe pytanie
                    1a.13. Dodaje pytanie do bazy danych
                    1a.14. Zapisuje zmiany do bazy danych
                    1a.15. KONIEC - sukces, pytanie zostało dodane
                1b. Jeśli nie jest:
                    1b.1. Wypisuje informacje o nadużyciu
                    1b.2. KONIEC - użytkownik nie uprawniony
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.AdminCommands.CreateProblemCover">
            <summary>
            Stwórz opracowanie dla problemu
            </summary>
            <returns></returns>
            <remarks>
            Wymaga aby wywołujący komendę miał uprawnienia administratora na serwerze
            
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy użytkownik jest uprawniony do wywołania komendy
                1a. Jeśli jest:
                    1a.1. Sprawdza czy gildia istnieje w bazie danych
                        1a.1a. Jeśli nie:
                            1a.1a.1. Tworzy nową gildię
                            1a.1a.2. Dodaje ją do bazy danych gildii
                            1a.1a.3. Zapisuje zmiany do bazy danych
                            1a.1a.4. Przekazuje dalej dane
                        1a.1b. Jeśli tak:
                            1a.1b.1. Pobiera dane o gildii
                    1a.2. Pobiera wszystkie dostępne w gildii kategorie
                    1a.3. Wysyła do użytkownika informacje o istniejących kategoriach
                    1a.4. Oczekuje na reakcję użytkownika z indeksem kategorii
                        1a.4a. Jeśli nie nadejdzie lub będzie miało nieprawidłowy format:
                            1a.4a.1. Poinformuje użytkownika o błędzie
                            1a.4a.2. Wstrzymuje proces
                            1a.4a.3. KONIEC - algorytm nie otrzymał wymaganej informacji od użytkownika lub nieprawidłowy format
                    1a.5. Oczekuje na reakcję użytkownika z tytułem opracowania
                        1a.5a. Jeśli nie nadejdzie:
                            1a.5a.1. Poinformuje użytkownika o błędzie
                            1a.5a.2. Wstrzymuje proces
                            1a.5a.3. KONIEC - algorytm nie otrzymał wymaganej informacji
                    1a.6. Oczekuje na reakcję użytkownika z treścią opracowania
                        1a.6a. Jeśli nie nadejdzie:
                            1a.6a.1. Poinformuje użytkownika o błędzie
                            1a.6a.2. Wstrzymuje proces
                            1a.6a.3. KONIEC - algorytm nie otrzymał wymaganej informacji
                    1a.7. Oczekuje na reakcję użytkownika z linkiem URL do obrazka
                        1a.7a. Jeśli nadejdzie:
                            1a.7a.1. Zapisuje informacje o obrazku
                    1a.8. Sprawdza najniższy dostępny numer identyfikacyjny
                    1a.9. Tworzy nowe opracowanie
                    1a.10. Dodaje opracowanie do bazy danych
                    1a.11. Zapisuje zmiany do bazy danych
                    1a.12. KONIEC - sukces, pytanie zostało dodane
                1b. Jeśli nie jest:
                    1b.1. Wypisuje informacje o nadużyciu
                    1b.2. KONIEC - użytkownik nie uprawniony
            </remarks>
        </member>
        <member name="T:QuizDiscordBot.Modules.Commands">
            <summary>
            Klasa z zarejestrwanymi komendami
            </summary>
            <remarks>
            Według konwencji komendy powinny być publicznymi asynchronicznymi zadaniami pomimo ostrzeżeń IDE
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.GiveFeedback(System.Boolean,System.String)">
            <summary>
            Komenda do pozostawienia oceny bota
            </summary>
            <param name="isPositive">
            Czy bot się podobał i spełnił swoje zadanie
            </param>
            <param name="description">
            Opis oceny
            </param>
            <returns></returns>
            <remarks>
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy ocena istnieje w bazie danych
                1a. Jeśli nie:
                    1a.1. Tworzy nową ocenę z domyślnymi wartościami
                    1a.2. Dodaje ją do bazy danych ocen
                    1a.3. Zapisuje zmiany do bazy danych
                    1a.4. Przekazuje dalej dane
                1b. Jeśli tak:
                    1b.1. Pobiera dane o ocenie
            2. Aktualizuje ocenę użytkownika
            3. Zapisuje zmiany do bazy danych
            4. KONIEC - sukces, pomyślnie oceniono pracę algorytmu
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.GetProblemCover(System.Int32)">
            <summary>
            Wyślij użytkownikowi opracowanie zagadnienia
            </summary>
            <param name="id">
            Id opracowania
            </param>
            <returns></returns>
            <remarks>
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy gildia istnieje w bazie danych
                1a. Jeśli nie:
                    1a.1. Tworzy nową gildię
                    1a.2. Dodaje ją do bazy danych gildii
                    1a.3. Zapisuje zmiany do bazy danych
                    1a.4. Przekazuje dalej dane
                1b. Jeśli tak:
                    1b.1. Pobiera dane o gildii
            2. Pobiera dostępne w gildii kategorie
            3. Wyszukuje opracowanie w kategoriach
                3a. Jeśli nie ma takiego opracowania
                    3a.1. KONIEC - nie znaleziono opracowania
            4. Tworzy sformatowaną wiadomość
            5. Sprawdza czy opracowanie posiada informację o obrazku
                5a. Jeśli tak:
                    5a.1. Dodaje do wiadomości obrazek
            6. Wyświetla opracowanie
            7. KONIEC - sukces, wyświetlono opracowanie
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.GetQuestion(System.Int32)">
            <summary>
            Zadaj użytkownikowi pytanie
            </summary>
            <param name="id">
            numer identyfikacyjny pytania
            </param>
            <returns></returns>
            <remarks>
            jeśli użytkownik nie poda id pytania, bot podejmie próbę wylosowania pytania, którego użytkownik jeszcze nie widział.
            
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza czy gildia istnieje w bazie danych
                1a. Jeśli nie:
                    1a.1. Tworzy nową gildię
                    1a.2. Dodaje ją do bazy danych gildii
                    1a.3. Zapisuje zmiany do bazy danych
                    1a.4. Przekazuje dalej dane
                1b. Jeśli tak:
                    1b.1. Pobiera dane o gildii
            2. Sprawdza czy podany użytkownik istnieje w bazie danych
                2a. Jeśli nie:
                    2a.1. Tworzy nowego użytkownika
                    2a.2. Dodaje go do bazy danych gildii
                    2a.3. Zapisuje zmiany do bazy danych
                    2a.4. Przekazuje dalej dane
                2b. Jeśli tak:
                    2b.1. Pobiera dane o użytkowniku
            3. Sprawdza czy użytkownik sprecyzował które pytanie chce zobaczyć
                3a. Jeśli tak:
                    3a.1. Sprawdza czy użytkownik widział to pytanie już wcześniej
                        3a.1a. Jeśli tak:
                            3a.1a.1. Zapamiętuje tą informację
                    3a.2. Wyszykuje z bazy danych pytanie o podanym numerze identyfikacyjnym
                3b. Jeśli nie:
                    3b.1. Sprawdza najwyższy dostępny numer Id pytania
                    3b.2. Pobiera wszystkie dostępne pytania
                    3b.3. Pobiera wszystkie pytania, których użytkownik wcześniej nie widział
                    3b.4. Sprawdza czy użytkownik widział wszystkie pytania
                        3b.4a. Jeśli tak:
                            3b.4a.1. Zapamiętuje, że użytkownik widział pytanie
                            3b.4a.2. Losuje pytanie z listy wszystkich dostępnych pytań
                        3b.4b. Jeśli nie:
                            3b.4a.1. Losuje pytanie z listy pytań nie widzianych wcześniej przez użytkownika
            4. Tworzy sformatowaną wiadomość
            5. Dodaje do jej treści potrzebne możliwe odpowiedzi
            6. Sprawdza czy pytanie posiada informację o obrazku
                6a. Jeśli tak:
                    6a.1. Dodaje do wiadomości obrazek
            7. Dodaje do właściwości wiadomości informacje czy ma się zakończyć po pierwszym użyciu, czy ma wspierać tylko jedną interakcję na użytkownika,
               czas trwania oraz co zrobić po zakończeniu.
            8. Dla każdej możliwej odpowiedzi: dodaje przycisk umożliwiający interakcję i informację co zrobić jak użytkownik wejdzie w interakcję z daną odpowiedzią
               w zależności od tego czy odpowiedź jest poprawna
            9. Wyświetla sformatowane pytanie
            10. Oczekuje reakcji użytkownika
                10a. Jeśli nadejdzie:
                    10a.1. Sprawdza z której kategorii pochodziło pytanie
                    10a.2. Sprawdza czy użytkownik widział pytanie wcześniej i czy udzielił poprawnej odpowiedzi
                        10a.2a. Jeśli widział wcześniej pytanie i odpowiedział poprawnie:
                            10a.2a.1. Sprawdza czy użytkownik udzielił poprzednio na to pytanie błędnej odpowiedzi
                                10a.2a.1a. Jeśli tak (poprawa):
                                    10a.2a.1a.1. Usuwa pytanie z listy pytań na które udzielił błędnej odpowiedzi
                                    10a.2a.1a.2. Dodaje użytkownikowi punkty za poprawną odpowiedź
                        10a.2b. Jeśli nie widział wcześniej pytania ale odpowiedział na nie poprawnie:
                            10a.2b.1. Dodaje użytkownikowi punkty za poprawną odpowiedź
                        10a.2c. Jeśli nie widział wcześniej pytania i nie udzielił na nie poprawnej odpowiedzi:
                            10a.2c.1. Dodaje pytanie do listy na które użytkownik nie udzielił poprawnej odpowiedzi
                    10a.3. Sprawdza czy użytkownik widział wcześniej to pytanie
                        10a.3a. Jeśli widzi je po raz pierwszy:
                            10a.3a.1. Dodaje pytanie do widzianych wcześniej pytań
                    10a.4. Informuje użytkownika o wyniku
            11. Po zakończeniu czasu zapisuje zmiany do bazy danych
            12. Wysyła do użytkownika informacje o zakończeniu czasu
            13. KONIEC - sukces, pomyślnie wyświetlono pytanie
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.Timeout(Discord.WebSocket.ISocketMessageChannel)">
            <summary>
            Zapisz zmiany do bazy danych
            </summary>
            <param name="channel">
            Kanał na który należy wysłać informacje o zapisaniu zmian w bazie
            </param>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.NotifyAboutResult(System.Boolean,Discord.WebSocket.ISocketMessageChannel)">
            <summary>
            Poinformuj o wyniku
            </summary>
            <param name="goodAnswer">
            Czy odpowiedź była prawidłowa
            </param>
            <param name="channel">
            Kanał na którym trzeba poinformować użytkownika o wyniku
            </param>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.CheckScore(System.Boolean,System.Boolean,System.Int32,System.Int32,QuizDiscordBot.Core.Objects.UserAccount,Discord.WebSocket.ISocketMessageChannel)">
            <summary>
            Sprawdź i oceń odpowiedź użytkownika
            </summary>
            <param name="wasSeen">
            Czy użytkownik widział to pytanie
            </param>
            <param name="goodAnswer">
            Czy użytkownik odpowiedział poprawnie na pytanie
            </param>
            <param name="id">
            Id pytania
            </param>
            <param name="categoryId">
            Id kategorii
            </param>
            <param name="userAccount">
            Konto użytkownika
            </param>
            <param name="channel">
            Kanał na który należy poinformować użytkownika o wyniku
            </param>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.GetCategoryContainingQuestionId(System.Int32,System.Collections.Generic.List{QuizDiscordBot.Core.Objects.Category})">
            <summary>
            Znajdź kategorie zawierającą pytanie
            </summary>
            <param name="id">
            Id pytania
            </param>
            <param name="categories">
            Kategorie obecne na serwerze
            </param>
            <returns>
            Id kategorii która zawiera pytanie
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Modules.Commands.Status(Discord.WebSocket.SocketGuildUser)">
            <summary>
            Sprawdź postępu użytkownika
            </summary>
            <param name="user">
            Użytkownik discorda
            </param>
            <returns></returns>
            <remarks>
            Schemat działania:
            0. START - użytkownik wpisał komendę
            1. Sprawdza, czy użytkownik sprecyzował czyje postępy chce sprawdzić
                1a. Jeśli nie:
                    1a.1. Ustawia wartość domyślną parametru user jako użytkownika, który wywołał komendę
            2. Sprawdza czy gildia istnieje w bazie danych
                2a. Jeśli nie:
                    2a.1. Tworzy nową gildię
                    2a.2. Dodaje ją do bazy danych gildii
                    2a.3. Zapisuje zmiany do bazy danych
                    2a.4. Przekazuje dalej dane
                2b. Jeśli tak:
                    2b.1. Pobiera dane o gildii
            3. Sprawdza czy podany użytkownik istnieje w bazie danych
                3a. Jeśli nie:
                    3a.1. Tworzy nowego użytkownika
                    3a.2. Dodaje go do bazy danych gildii
                    3a.3. Zapisuje zmiany do bazy danych
                    3a.4. Przekazuje dalej dane
                3b. Jeśli tak:
                    3b.1. Pobiera dane o użytkowniku
            4. Tworzy sformatowaną wiadomość
            5. Zapełnia wiadomość informacjami o postępach użytkownika
            6. Wyświetla postępy użytkownika
            7. KONIEC - sukces, pomyślnie wyświetlono postępy użytkownika
            </remarks>
        </member>
        <member name="T:QuizDiscordBot.Program">
            <summary>
            Algorytm ułatwiający naukę z dowolnej dziedziny, zaimplementowany w bota discordowego.
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Program._client">
            <summary>
            Obiekt odpowiedzialny za obsługę konta bota na discordzie
            </summary>
        </member>
        <member name="F:QuizDiscordBot.Program._handler">
            <summary>
            Instancja klasy odpowiedzialnej za reakcje na komendy
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Program.Main">
            <summary>
            Main
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Program.RunBotAsync">
            <summary>
            Asynchroniczne zadanie uruchamiające bota
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Program.InitializationClient">
            <summary>
            Przygotuj bota do pracy
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Program.LoginAsync">
            <summary>
            Zaloguj bota na serwer
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Program.HandlerInitialize">
            <summary>
            Przygotuj obsługę komend
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuizDiscordBot.Program.InitializationLogs">
            <summary>
            Przygotuj logi
            </summary>
            <returns>
            Task object
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Program.BotLog(Discord.LogMessage)">
            <summary>
            Wypisz wiadomość logu w konsoli
            </summary>
            <param name="msg">
            LogMessage object used for logging purposes
            </param>
            <returns>
            Task object
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Storage.IStorage">
            <summary>
            Interface do obsługi zapisów i odczytów
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Storage.IStorage.RestoreObject``1(System.String)">
            <summary>
            Wczytaj obiekt typu T.
            </summary>
            <typeparam name="T">
            Typ obiektu wczytywanego z pliku
            </typeparam>
            <param name="filePath">
            Ścieżka do pliku
            </param>
            <returns>
            Obiekt typu T z pliku pod ścieżką filepath
            </returns>
        </member>
        <member name="M:QuizDiscordBot.Storage.IStorage.StoreObject(System.Object,System.String)">
            <summary>
            Zapisz obiekt w pliku
            </summary>
            <param name="obj">
            Obiekt do zapisania
            </param>
            <param name="filePath">
            Ścieżka do pliku
            </param>
        </member>
        <member name="M:QuizDiscordBot.Storage.IStorage.FileExist(System.String)">
            <summary>
            Sprawdź czy istnieje plik pod ścieżką filepath
            </summary>
            <param name="filePath">
            Ścieżka do pliku
            </param>
            <returns>
            true - jeśli istnieje i vice versa
            </returns>
        </member>
        <member name="T:QuizDiscordBot.Storage.JsonStorage">
            <summary>
            Klasa do obsługi zapisów i odczytów w plikach .json
            </summary>
        </member>
        <member name="M:QuizDiscordBot.Storage.JsonStorage.RestoreObject``1(System.String)">
            <summary>
            Wczytaj obiekt typu T z pliku JSON.
            </summary>
            <typeparam name="T">
            Typ obiektu wczytywanego z pliku
            </typeparam>
            <param name="filePath">
            Ścieżka do pliku bez rozszerzenia
            </param>
            <returns>
            Obiekt typu T z pliku pod ścieżką filepath
            </returns>
            <remarks>
            Rozszerzenie .json należy pominąć przy wywoływaniu metody
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Storage.JsonStorage.StoreObject(System.Object,System.String)">
            <summary>
            Zapisz obiekt w pliku
            </summary>
            <param name="obj">
            Obiekt do zapisania
            </param>
            <param name="filePath">
            Ścieżka do pliku bez rozszerzenia
            </param>
            <remarks>
            Rozszerzenie .json należy pominąć przy wywoływaniu metody
            </remarks>
        </member>
        <member name="M:QuizDiscordBot.Storage.JsonStorage.FileExist(System.String)">
            <summary>
            Sprawdź czy istnieje plik pod ścieżką filepath
            </summary>
            <param name="filePath">
            Ścieżka do pliku bez rozszerzenia
            </param>
            <returns>
            true - jeśli istnieje i vice versa
            </returns>
            <remarks>
            Rozszerzenie .json należy pominąć przy wywoływaniu metody
            </remarks>
        </member>
        <member name="T:QuizDiscordBot.Util">
            <summary>
            Klasa narzędzi urzywanych w innych miejscach w programie
            </summary>
        </member>
        <member name="P:QuizDiscordBot.Util.AnswersEmojis">
            <summary>
            Lista emotek oznaczających możliwe odpowiedzi
            </summary>
            <remarks>
            Odgórny limit Discord: 20 emotek
            </remarks>
        </member>
    </members>
</doc>
